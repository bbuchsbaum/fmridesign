% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condition_basis_list.R
\name{condition_basis_list}
\alias{condition_basis_list}
\title{Convert an \code{event_term} to a per-condition basis list}
\usage{
condition_basis_list(
  x,
  hrf,
  sampling_frame,
  ...,
  output = c("condition_list", "matrix")
)
}
\arguments{
\item{x}{An \code{\link{event_term}} object.}

\item{hrf}{An \code{\link{HRF}} object to apply.}

\item{sampling_frame}{A \code{\link{sampling_frame}} object defining the temporal grid.}

\item{...}{Further arguments passed on to
\code{\link[=convolve]{convolve()}} (e.g. \code{drop.empty = FALSE}).}

\item{output}{Either "matrix" (default) for the ordinary design matrix
or "condition_list" for the split-by-condition list.}
}
\value{
A numeric \emph{matrix} or a named \emph{list} of matrices, depending on
\code{output}.
}
\description{
A lightweight wrapper around \code{\link[=convolve]{convolve()}} that post-processes the
resulting design matrix into a named list of T x d matrices - one per
experimental condition ("base condition tag").  This keeps \strong{all} of the
heavy lifting inside \strong{fmrireg} while exposing a minimal, pipe-friendly API
that can be used anywhere a condition -> basis split is required (e.g. for
CFALS).
}
\examples{
# Create sample event data with parametric modulator
events <- data.frame(
  onset = c(2, 6, 10, 14, 18),
  condition = factor(c("A", "B", "A", "B", "C")),
  rt = c(0.5, 0.8, 0.6, 0.9, 0.7),
  block = c(1, 1, 2, 2, 2)
)

# Create sampling frame
sf <- fmrihrf::sampling_frame(blocklens = c(10, 10), TR = 2)

# Create HRF with multiple basis functions
hrf_spmg3 <- fmrihrf::HRF_SPMG3

# Create event term
term <- event_term(
  list(condition = events$condition, rt = events$rt),
  onsets = events$onset,
  blockids = events$block
)

# Convert to condition basis list
cbl <- condition_basis_list(term, hrf_spmg3, sf, output = "condition_list")
names(cbl)

# Get as matrix instead
cbl_matrix <- condition_basis_list(term, hrf_spmg3, sf, output = "matrix")
dim(cbl_matrix)
}
