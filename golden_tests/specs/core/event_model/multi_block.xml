<?xml version="1.0" encoding="UTF-8"?>
<golden_test xmlns="http://golden-tests.org/schema">
  <metadata>
    <id>event_model_multi_block</id>
    <version>1.0</version>
    <description>Test event model with multiple runs/blocks</description>
    <tags>
      <tag>event_model</tag>
      <tag>multi_run</tag>
      <tag>block_structure</tag>
    </tags>
  </metadata>
  
  <semantic_description>
    <purpose>Verify correct handling of multi-run experiments with block structure</purpose>
    <algorithm>
      1. Create events distributed across multiple runs/blocks
      2. Each run has different length to test flexibility
      3. Ensure design matrix respects block boundaries (no cross-block contamination)
      4. Verify that each block's portion of the design matrix is correctly sized
      5. Check that events near block boundaries are handled correctly
    </algorithm>
  </semantic_description>
  
  <inputs>
    <sampling_frame>
      <block_lengths>60,80,70</block_lengths>
      <TR>2.0</TR>
    </sampling_frame>
    
    <events>
      <!-- Block 1 events -->
      <event>
        <onset>5.0</onset>
        <condition>A</condition>
        <block>1</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>20.0</onset>
        <condition>B</condition>
        <block>1</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>35.0</onset>
        <condition>A</condition>
        <block>1</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>50.0</onset>
        <condition>B</condition>
        <block>1</block>
        <duration>0.0</duration>
      </event>
      
      <!-- Block 2 events -->
      <event>
        <onset>10.0</onset>
        <condition>A</condition>
        <block>2</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>30.0</onset>
        <condition>B</condition>
        <block>2</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>50.0</onset>
        <condition>A</condition>
        <block>2</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>70.0</onset>
        <condition>B</condition>
        <block>2</block>
        <duration>0.0</duration>
      </event>
      
      <!-- Block 3 events -->
      <event>
        <onset>8.0</onset>
        <condition>A</condition>
        <block>3</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>25.0</onset>
        <condition>B</condition>
        <block>3</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>42.0</onset>
        <condition>A</condition>
        <block>3</block>
        <duration>0.0</duration>
      </event>
      <event>
        <onset>60.0</onset>
        <condition>B</condition>
        <block>3</block>
        <duration>0.0</duration>
      </event>
    </events>
    
    <model_params>
      <hrf_basis>canonical</hrf_basis>
      <precision>0.3</precision>
    </model_params>
  </inputs>
  
  <expected_outputs>
    <design_matrix>
      <dimensions>
        <rows>210</rows>  <!-- 60+80+70 = 210 total scans -->
        <columns>2</columns>
      </dimensions>
      <column_names>
        <name>condition_condition.A</name>
        <name>condition_condition.B</name>
      </column_names>
      <numeric_checks>
        <!-- Check total sum across all blocks -->
        <check>
          <type>column_sum</type>
          <location>
            <column>0</column>
          </location>
          <expected>29.492</expected>
          <tolerance>0.01</tolerance>
          <description>Total sum for condition A (6 events across 3 blocks)</description>
        </check>
        
        <check>
          <type>column_sum</type>
          <location>
            <column>1</column>
          </location>
          <expected>29.488</expected>
          <tolerance>0.01</tolerance>
          <description>Total sum for condition B (6 events across 3 blocks)</description>
        </check>
        
        <!-- Verify no response at block boundaries -->
        <check>
          <type>exact_value</type>
          <location>
            <column>0</column>
            <row>59</row>  <!-- Last scan of block 1 (0-indexed) -->
          </location>
          <expected>0.0</expected>
          <tolerance>0.01</tolerance>
          <description>No cross-block contamination at end of block 1</description>
        </check>
        
        <check>
          <type>exact_value</type>
          <location>
            <column>0</column>
            <row>60</row>  <!-- First scan of block 2 (0-indexed) -->
          </location>
          <expected>0.0</expected>
          <tolerance>0.01</tolerance>
          <description>Clean start at beginning of block 2</description>
        </check>
        
        <!-- Check peak in first block -->
        <check>
          <type>peak_value</type>
          <location>
            <column>0</column>
            <row_range>5,7</row_range>
          </location>
          <expected>1.576</expected>
          <tolerance>0.01</tolerance>
          <description>Peak response in block 1</description>
        </check>
        
        <!-- Check peak in second block -->
        <check>
          <type>peak_value</type>
          <location>
            <column>0</column>
            <row_range>65,67</row_range>
          </location>
          <expected>1.750</expected>
          <tolerance>0.01</tolerance>
          <description>Peak response in block 2</description>
        </check>
      </numeric_checks>
    </design_matrix>
  </expected_outputs>
  
  <implementations>
    <R><![CDATA[
library(fmridesign)
library(fmrihrf)

# Create sampling frame with multiple blocks of different lengths
sframe <- sampling_frame(blocklens = c(60, 80, 70), TR = 2.0)

# Create event data distributed across blocks
event_data <- data.frame(
  onset = c(5.0, 20.0, 35.0, 50.0,    # Block 1
            10.0, 30.0, 50.0, 70.0,   # Block 2  
            8.0, 25.0, 42.0, 60.0),   # Block 3
  condition = factor(c("A", "B", "A", "B",
                       "A", "B", "A", "B",
                       "A", "B", "A", "B")),
  block = c(1, 1, 1, 1,
            2, 2, 2, 2,
            3, 3, 3, 3)
)

# Create event model
ev_model <- event_model(
  onset ~ hrf(condition),
  data = event_data,
  block = ~block,
  sampling_frame = sframe,
  precision = 0.3
)

# Get design matrix
dm <- design_matrix(ev_model)

# Convert to regular matrix for numeric checks
dm_matrix <- as.matrix(dm)
    ]]></R>
  </implementations>
</golden_test>