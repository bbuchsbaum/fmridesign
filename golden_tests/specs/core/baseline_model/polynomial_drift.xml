<?xml version="1.0" encoding="UTF-8"?>
<golden_test xmlns="http://golden-tests.org/schema">
  <metadata>
    <id>baseline_model_polynomial_drift</id>
    <version>1.0</version>
    <description>Test polynomial drift correction in baseline model</description>
    <tags>
      <tag>baseline_model</tag>
      <tag>drift</tag>
      <tag>polynomial</tag>
      <tag>nuisance</tag>
    </tags>
  </metadata>
  
  <semantic_description>
    <purpose>Verify correct generation of polynomial drift basis functions for baseline correction</purpose>
    <algorithm>
      1. Create polynomial basis functions up to specified degree
      2. Orthogonalize polynomials to avoid collinearity  
      3. Scale polynomials to unit interval [-1, 1]
      4. Generate separate polynomial sets for each run/block
      5. Combine with block-wise intercepts
      6. Verify orthogonality and proper scaling
    </algorithm>
    <references>
      <reference>Worsley et al. (2002). A general statistical analysis for fMRI data. NeuroImage, 15(1), 1-15.</reference>
    </references>
  </semantic_description>
  
  <inputs>
    <sampling_frame>
      <block_lengths>50,60</block_lengths>
      <TR>2.0</TR>
    </sampling_frame>
    
    <model_params>
      <degree>3</degree>
      <intercept>true</intercept>
    </model_params>
  </inputs>
  
  <expected_outputs>
    <design_matrix>
      <dimensions>
        <rows>110</rows>  <!-- 50+60 = 110 scans -->
        <columns>8</columns>  <!-- 2 blocks Ã— (3 polynomial terms + intercept) -->
      </dimensions>
      <column_names>
        <name>base_poly1_block_1</name>
        <name>base_poly2_block_1</name>
        <name>base_poly3_block_1</name>
        <name>base_poly1_block_2</name>
        <name>base_poly2_block_2</name>
        <name>base_poly3_block_2</name>
        <name>constant_1</name>
        <name>constant_2</name>
      </column_names>
      <numeric_checks>
        <!-- Check intercept columns -->
        <check>
          <type>column_sum</type>
          <location>
            <column>6</column>
          </location>
          <expected>50.0</expected>
          <tolerance>0.001</tolerance>
          <description>Sum of intercept for block 1 (50 scans)</description>
        </check>
        
        <check>
          <type>column_sum</type>
          <location>
            <column>7</column>
          </location>
          <expected>60.0</expected>
          <tolerance>0.001</tolerance>
          <description>Sum of intercept for block 2 (60 scans)</description>
        </check>
        
        <!-- Check orthogonality of polynomial terms -->
        <check>
          <type>mean</type>
          <location>
            <column>0</column>
          </location>
          <expected>0.0</expected>
          <tolerance>0.001</tolerance>
          <description>Mean of linear polynomial (centered)</description>
        </check>
        
        <!-- Check range of linear term -->
        <check>
          <type>min</type>
          <location>
            <column>0</column>
          </location>
          <expected>-0.241</expected>
          <tolerance>0.01</tolerance>
          <description>Minimum of scaled linear polynomial</description>
        </check>
        
        <check>
          <type>max</type>
          <location>
            <column>0</column>
          </location>
          <expected>0.241</expected>
          <tolerance>0.01</tolerance>
          <description>Maximum of scaled linear polynomial</description>
        </check>
        
        <!-- Verify block structure (no cross-block values) -->
        <check>
          <type>exact_value</type>
          <location>
            <column>0</column>
            <row>50</row>  <!-- First scan of block 2 -->
          </location>
          <expected>0.0</expected>
          <tolerance>0.0001</tolerance>
          <description>No values from block 1 polynomial in block 2</description>
        </check>
      </numeric_checks>
    </design_matrix>
  </expected_outputs>
  
  <implementations>
    <R><![CDATA[
library(fmridesign)
library(fmrihrf)

# Create sampling frame with two blocks
sframe <- sampling_frame(blocklens = c(50, 60), TR = 2.0)

# Create baseline model with polynomial drift
baseline <- baseline_model(
  sframe = sframe,
  basis = "poly",
  degree = 3
)

# Get design matrix
dm <- design_matrix(baseline)

# Convert to regular matrix for numeric checks
dm_matrix <- as.matrix(dm)
    ]]></R>
  </implementations>
</golden_test>